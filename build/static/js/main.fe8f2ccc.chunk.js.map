{"version":3,"sources":["components/Square.js","components/InfoScreen.js","App.js","serviceWorker.js","index.js"],"names":["Square","marker","this","props","classes","icon","push","concat","react_default","a","createElement","onClick","placeMarker","className","join","Component","InfoScreen","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","friend","human","setPlayers","bind","assertThisInitialized","field","event","newState","target","value","setState","_this$props","childStyle","message","startGame","_this$state","style","id","onSubmit","display","htmlFor","type","name","checked","onChange","getSpaces","App","winner","turn","com","spaces","xScore","oScore","winSequences","inverse","arguments","length","undefined","squareId","getNextMove","spaceIndex","indexOf","scoreToUpdate","getScoreUpdateKey","slice","splice","humanScore","comScore","i","seq","threat","victory","j","space","inHumanScore","inComScore","every","Math","floor","random","score","substring","data","preventDefault","_this$state2","checkForWinner","endGame","board","_this$state3","Square_Square","key","InfoScreen_InfoScreen","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe8f2ccc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Square extends Component {\n\n  render() {\n    const { marker } = this.props\n    const classes = [ 'square', 'perfect-center-parent' ]\n    let icon = marker ? ( marker === 'x' ? 'times' : 'circle' ) : null\n\n    if(icon) {\n      classes.push('marked', `marked-${marker}`)\n    }\n\n    return (\n      <div onClick={this.props.placeMarker} className={ classes.join(' ') }>\n        { icon && <span className=\"marker perfect-center-child\"><i className={'fas fa-' + icon}></i></span> }\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\n\nexport default class InfoScreen extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      friend: false,\n      human: 'x'\n    }\n\n    this.setPlayers = this.setPlayers.bind(this)\n  }\n\n  setPlayers(field, event) {\n    const newState = {}\n    \n    if(field === 'friend') {\n      newState[field] = !this.state.friend\n    } else {\n      newState[field] = event.target.value\n    }\n\n    this.setState(newState)\n  }\n\n  render() {\n    const { childStyle, message, startGame } = this.props\n    const { friend, human } = this.state\n\n    return (\n      <div style={childStyle} className=\"overlay\">\n        \n        { message && <div className=\"winner\">\n          { message }\n        </div> }\n        \n        <h2 className=\"heading\">Tic Tac Toe</h2>\n\n        <form id=\"set-players\" onSubmit={startGame.bind(null, this.state)}>\n          \n          <div className=\"form-group opponent\" style={{ display: 'none'}}>\n            <legend>Choose your opponent</legend>\n            <label htmlFor=\"opponent-computer\">\n              <input id=\"opponent-computer\" type=\"radio\" name=\"opponent\" value=\"computer\" checked={!friend ? 'checked' : ''} onChange={this.setPlayers.bind(this, 'friend')} />\n              <div></div>\n              <i className=\"fas fa-desktop\"></i>\n            </label>\n            <label htmlFor=\"opponent-friend\">\n              <input id=\"opponent-friend\" type=\"radio\" name=\"opponent\" value=\"friend\" checked={friend ? 'checked' : ''} onChange={this.setPlayers.bind(this, 'friend')} />\n              <div></div>\n              <i className=\"fas fa-user\"></i>\n            </label>\n          </div>\n\n          <div className=\"form-group team\">\n            <legend>Choose your side</legend>\n            <label htmlFor=\"team-x\">\n              <input id=\"team-x\" type=\"radio\" name=\"team\" value=\"x\" checked={human === 'x' ? 'checked' : ''} onChange={this.setPlayers.bind(this, 'human')} />\n              <div></div>\n              <i className=\"fas fa-times\"></i>\n            </label>\n            <label htmlFor=\"team-o\">\n              <input id=\"team-o\" type=\"radio\" name=\"team\" value=\"o\" checked={human === 'o' ? 'checked' : ''} onChange={this.setPlayers.bind(this, 'human')} />\n              <div></div>\n              <i className=\"far fa-circle\"></i>\n            </label>\n          </div>\n\n          <button className=\"button\" type=\"submit\">Start Game</button>\n        </form>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport Square from './components/Square'\nimport InfoScreen from './components/InfoScreen'\n\nconst getSpaces = () => [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ]\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props)\n    \n    this.state = {\n      friend: false,\n      winner: false,\n      turn: 1,\n      human: null,\n      com: null,\n      spaces: getSpaces(),\n      xScore: [],\n      oScore: [],\n      winSequences: [\n        [ 0, 1, 2 ],\n        [ 3, 4, 5 ],\n        [ 6, 7, 8 ],\n        [ 0, 3, 6 ],\n        [ 1, 4, 7 ],\n        [ 2, 5, 8 ],\n        [ 0, 4, 8 ],\n        [ 2, 4, 6 ]\n      ]\n    }\n  \n    this.startGame = this.startGame.bind(this)\n    this.placeMarker = this.placeMarker.bind(this)\n  }\n\n  getScoreUpdateKey(inverse = false) {\n    const { turn } = this.state\n    let cond = inverse ? turn % 2 === 0 : turn % 2 !== 0\n    return (cond ? 'x' : 'o') + 'Score'\n  }\n\n  placeMarker(squareId = null) {\n    const { spaces } = this.state\n\n    if(typeof squareId === 'object') {\n      squareId = this.getNextMove()\n    }\n\n    const spaceIndex = spaces.indexOf(squareId)\n    const newState = {}\n\n    // determine which score to update\n    const scoreToUpdate = this.getScoreUpdateKey()\n\n    // if the space is no longer available, do nothing\n    if(spaceIndex === -1) return\n\n    // update the available spaces on the board\n    newState.spaces = spaces.slice()\n    newState.spaces.splice(spaceIndex, 1)\n\n    // update score\n    newState[scoreToUpdate] = this.state[scoreToUpdate].slice()\n    newState[scoreToUpdate].push(squareId)\n\n    // increment turn count\n    newState.turn = this.state.turn + 1\n    this.setState(newState)\n  }\n\n  getNextMove() {\n    const { spaces, turn, winSequences, com } = this.state\n    const humanScore = this.state[this.getScoreUpdateKey(true)]\n    const comScore = this.state[this.getScoreUpdateKey()]\n\n    for(let i = 0; i < winSequences.length; i++) {\n      const seq = winSequences[i]\n      const threat = seq.slice()\n      const victory = seq.slice()\n      // the threat and victory arrays keep track of which winning combination spaces are held by the human and computer players respectively\n      // console.log('sequence:', seq)\n      // console.log('human score:', humanScore)\n      for(let j = 0; j < seq.length; j++) {\n        const space = seq[j]\n        const inHumanScore = humanScore.indexOf(space)\n        const inComScore = comScore.indexOf(space)\n        // console.log('space:', space, 'in human score:', inHumanScore)\n        if(inHumanScore !== -1) {\n          threat.splice(threat.indexOf(space), 1)\n        }\n        if(inComScore !== -1) {\n          victory.splice(victory.indexOf(space), 1)\n        }\n      }\n      // console.log('updated threat:', threat)\n      // console.log('threat is still available', spaces.indexOf(threat[0]) !== -1)\n      \n      // human takes corner in first move\n      if(com === 'o' && turn === 2 && [0, 2, 6, 8].indexOf(humanScore[0]) !== -1) {\n        return 4\n      }\n      // human takes opposing corners in second move\n      if(com === 'o' && turn === 4 && ([0, 8].every(space => humanScore.indexOf(space) !== -1) || [2, 6].every(space => humanScore.indexOf(space) !== -1))) {\n        return 1\n      }\n      // win\n      if(victory.length === 1 && spaces.indexOf(victory[0]) !== -1) {\n        return victory[0]\n      }\n      // block     \n      if(threat.length === 1 && spaces.indexOf(threat[0]) !== -1) {\n        return threat[0]\n      }\n      // console.log('---')\n    }\n    // choose random square if turn count is less than required to start blocking\n    return spaces[Math.floor(Math.random() * spaces.length)]\n  }\n\n  checkForWinner() {\n    // check the player score of the previous turn as by the time it does the check it will be in a new turn cycle\n    const { winSequences } = this.state\n    const score = this.state[this.getScoreUpdateKey(true)]\n\n    for(let i = 0; i < winSequences.length; i++) {\n      const seq = winSequences[i]\n      for(let j = 0; j < seq.length; j++) {\n        const space = seq[j]\n        if(score.indexOf(space) === -1) {\n          break\n        }\n        if(j === 2) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n  endGame() {\n    this.setState({\n      winner: this.getScoreUpdateKey(true).substring(0, 1)\n    })\n  }\n\n  startGame(data, event) {\n    event.preventDefault()\n    const human = data.human\n    const com = human === 'x' ? 'o' : 'x'\n    \n    // reset game state\n    this.setState({\n      friend: data.friend,\n      human,\n      com,\n      winner: null,\n      xScore: [],\n      oScore: [],\n      spaces: getSpaces(),\n      turn: 1\n    })\n  }\n\n  marker(id) {\n    // space is still open\n    if(this.state.spaces.indexOf(id) !== -1) {\n      return ''\n    }\n    return this.state.xScore.indexOf(id) === -1 ? 'o' : 'x'\n  }\n\n  componentDidUpdate() {\n    const { turn, winner, com, friend } = this.state\n    \n    // if a winner is set, do nothing\n    if(winner) return\n    \n    // check for a winner and end the current game if a winner exists\n    if(turn > 5 && this.checkForWinner()) {\n      this.endGame()\n      return\n    }\n\n    // determine if the computer should make a move\n    if(!friend && this.getScoreUpdateKey().substring(0, 1) === com) { \n      this.placeMarker()      \n    } \n  }\n  \n  render() {\n    const board = []\n    const style = { display: 'none' }\n    const { com, human, winner, turn } = this.state\n    let message = ''\n\n    for(let i = 0; i < 9; i++) {\n      board.push(<Square marker={this.marker.call(this, i)} key={i} placeMarker={this.placeMarker.bind(this, i)}></Square>)\n    }\n\n    if(winner === human) {\n      message = 'You Win!'\n    } else if(winner === com) {\n      message = 'You Lose!'\n    } else if(turn === 10) {\n      message = 'Draw!'\n      style.display = 'block'\n    }\n\n    // show overlay\n    if(!com || winner) {\n      style.display = 'block'\n    }\n\n    return (\n      <div className=\"App\">\n        <div id=\"board\">\n          <InfoScreen childStyle={style} startGame={this.startGame.bind(this)} message={message}/>\n          <div className=\"wrap perfect-center-child\">\n           { board }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}